{"ast":null,"code":"import Repository, { baseUrlProduct, serializeQuery } from './Repository';\nexport async function getTotalRecords() {\n  const reponse = await Repository.get(`${baseUrlProduct}/products/count`).then(response => {\n    return response.data;\n  }).catch(error => ({\n    error: JSON.stringify(error)\n  }));\n  return reponse;\n}\nexport async function getProductsByIds(payload) {\n  const endPoint = `${baseUrlProduct}/products?${payload}`;\n  const reponse = await Repository.get(endPoint).then(response => {\n    return {\n      items: response.data,\n      totalItems: response.data.length\n    };\n  }).catch(error => ({\n    error: JSON.stringify(error)\n  }));\n  return reponse;\n}\n\nclass ProductRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getProducts(params) {\n    const reponse = await Repository.get(`${baseUrlProduct}/products?${serializeQuery(params)}`).then(response => {\n      return {\n        items: response.data,\n        totalItems: response.data.length\n      };\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsById(payload) {\n    const reponse = await Repository.get(`${baseUrlProduct}/products/${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductCategories() {\n    const reponse = await Repository.get(`${baseUrlProduct}/product-categories`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getPrductCategoryBySlug(payload) {\n    const reponse = await Repository.get(`${baseUrlProduct}/product-categories?slug=${payload}`).then(response => {\n      if (response.data && response.data.length > 0) {\n        return {\n          data: response.data[0],\n          products: response.data[0].products\n        };\n      } else {\n        return null;\n      }\n    }).catch(error => {\n      console.log(JSON.stringify(error));\n      return null;\n    });\n    return reponse;\n  }\n\n  async getProductsByPriceRange(payload) {\n    const reponse = await Repository.get(`${baseUrlProduct}/products?${serializeQuery(payload)}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new ProductRepository();","map":{"version":3,"sources":["/home/onizuka/Bureau/Projects/StandOut/repositories/ProductRepository.js"],"names":["Repository","baseUrlProduct","serializeQuery","getTotalRecords","reponse","get","then","response","data","catch","error","JSON","stringify","getProductsByIds","payload","endPoint","items","totalItems","length","ProductRepository","constructor","callback","getProducts","params","getProductsById","getProductCategories","getPrductCategoryBySlug","products","console","log","getProductsByPriceRange"],"mappings":"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","sourcesContent":["import Repository, { baseUrlProduct, serializeQuery } from './Repository';\n\nexport async function getTotalRecords() {\n    const reponse = await Repository.get(`${baseUrlProduct}/products/count`)\n        .then((response) => {\n            return response.data;\n        })\n        .catch((error) => ({ error: JSON.stringify(error) }));\n    return reponse;\n}\n\nexport async function getProductsByIds(payload) {\n    const endPoint = `${baseUrlProduct}/products?${payload}`;\n    const reponse = await Repository.get(endPoint)\n        .then((response) => {\n            return {\n                items: response.data,\n                totalItems: response.data.length,\n            };\n        })\n\n        .catch((error) => ({ error: JSON.stringify(error) }));\n    return reponse;\n}\n\nclass ProductRepository {\n    constructor(callback) {\n        this.callback = callback;\n    }\n\n    async getProducts(params) {\n        const reponse = await Repository.get(\n            `${baseUrlProduct}/products?${serializeQuery(params)}`\n        )\n            .then((response) => {\n                return {\n                    items: response.data,\n                    totalItems: response.data.length,\n                };\n            })\n\n            .catch((error) => ({ error: JSON.stringify(error) }));\n        return reponse;\n    }\n\n    async getProductsById(payload) {\n        const reponse = await Repository.get(\n            `${baseUrlProduct}/products/${payload}`\n        )\n            .then((response) => {\n                return response.data;\n            })\n            .catch((error) => ({ error: JSON.stringify(error) }));\n        return reponse;\n    }\n\n    async getProductCategories() {\n        const reponse = await Repository.get(\n            `${baseUrlProduct}/product-categories`\n        )\n            .then((response) => {\n                return response.data;\n            })\n            .catch((error) => ({ error: JSON.stringify(error) }));\n        return reponse;\n    }\n\n    async getPrductCategoryBySlug(payload) {\n        const reponse = await Repository.get(\n            `${baseUrlProduct}/product-categories?slug=${payload}`\n        )\n            .then((response) => {\n                if (response.data && response.data.length > 0) {\n                    return {\n                        data: response.data[0],\n                        products: response.data[0].products,\n                    };\n                } else {\n                    return null;\n                }\n            })\n            .catch((error) => {\n                console.log(JSON.stringify(error));\n                return null;\n            });\n        return reponse;\n    }\n\n    async getProductsByPriceRange(payload) {\n        const reponse = await Repository.get(\n            `${baseUrlProduct}/products?${serializeQuery(payload)}`\n        )\n            .then((response) => {\n                return response.data;\n            })\n            .catch((error) => ({ error: JSON.stringify(error) }));\n        return reponse;\n    }\n}\n\nexport default new ProductRepository();\n"]},"metadata":{},"sourceType":"module"}