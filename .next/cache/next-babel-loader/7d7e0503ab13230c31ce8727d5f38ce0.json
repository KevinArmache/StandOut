{"ast":null,"code":"import Repository, { baseUrl, serializeQuery } from './Repository';\n\nclass PostRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getPosts(payload) {\n    const endPoint = `posts?${serializeQuery(payload)}`;\n    const reponse = await Repository.get(`${baseUrl}/${endPoint}`).then(response => {\n      if (response.data.length > 0) {\n        return response.data;\n      } else {\n        return null;\n      }\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getPostBySlug(payload) {\n    const reponse = await Repository.get(`${baseUrl}/posts?slug=${payload}`).then(response => {\n      if (response.data.length > 0) {\n        return response.data[0];\n      } else {\n        return null;\n      }\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async SPGetPostItemOfCollectionBySlug(payload) {\n    const endPoint = `collections?${serializeQuery(payload)}`;\n    const reponse = await Repository.get(`${baseUrl}/${endPoint}`).then(response => {\n      if (response.data && response.data[0].posts.length > 0) {\n        return response.data[0].posts;\n      } else {\n        return null;\n      }\n    }).catch(error => {\n      console.log(JSON.stringify(error));\n      return null;\n    });\n    return reponse;\n  }\n\n  async getPostItemsByKeyword(payload) {\n    const reponse = await Repository.get(`${baseUrl}/posts?title_contains=${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getPostItemsByCategory(payload) {\n    const reponse = await Repository.get(`${baseUrl}/posts?title_contains=${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new PostRepository();","map":{"version":3,"sources":["/home/onizuka/Bureau/Templates/React/themeforest-ekfrwlJp-supro-minimalist-ecommerce-reactjs-template/supro_react_package_1_0_0/supro-react/supro-react/repositories/PostRepository.js"],"names":["Repository","baseUrl","serializeQuery","PostRepository","constructor","callback","getPosts","payload","endPoint","reponse","get","then","response","data","length","catch","error","JSON","stringify","getPostBySlug","SPGetPostItemOfCollectionBySlug","posts","console","log","getPostItemsByKeyword","getPostItemsByCategory"],"mappings":"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","sourcesContent":["import Repository, { baseUrl, serializeQuery } from './Repository';\n\nclass PostRepository {\n    constructor(callback) {\n        this.callback = callback;\n    }\n\n    async getPosts(payload) {\n        const endPoint = `posts?${serializeQuery(payload)}`;\n        const reponse = await Repository.get(`${baseUrl}/${endPoint}`)\n            .then((response) => {\n                if (response.data.length > 0) {\n                    return response.data;\n                } else {\n                    return null;\n                }\n            })\n            .catch((error) => ({ error: JSON.stringify(error) }));\n        return reponse;\n    }\n\n    async getPostBySlug(payload) {\n        const reponse = await Repository.get(`${baseUrl}/posts?slug=${payload}`)\n            .then((response) => {\n                if (response.data.length > 0) {\n                    return response.data[0];\n                } else {\n                    return null;\n                }\n            })\n            .catch((error) => ({ error: JSON.stringify(error) }));\n        return reponse;\n    }\n\n    async SPGetPostItemOfCollectionBySlug(payload) {\n        const endPoint = `collections?${serializeQuery(payload)}`;\n        const reponse = await Repository.get(`${baseUrl}/${endPoint}`)\n            .then((response) => {\n                if (response.data && response.data[0].posts.length > 0) {\n                    return response.data[0].posts;\n                } else {\n                    return null;\n                }\n            })\n            .catch((error) => {\n                console.log(JSON.stringify(error));\n                return null;\n            });\n        return reponse;\n    }\n\n    async getPostItemsByKeyword(payload) {\n        const reponse = await Repository.get(\n            `${baseUrl}/posts?title_contains=${payload}`\n        )\n            .then((response) => {\n                return response.data;\n            })\n            .catch((error) => ({ error: JSON.stringify(error) }));\n        return reponse;\n    }\n\n    async getPostItemsByCategory(payload) {\n        const reponse = await Repository.get(\n            `${baseUrl}/posts?title_contains=${payload}`\n        )\n            .then((response) => {\n                return response.data;\n            })\n            .catch((error) => ({ error: JSON.stringify(error) }));\n        return reponse;\n    }\n}\n\nexport default new PostRepository();\n"]},"metadata":{},"sourceType":"module"}