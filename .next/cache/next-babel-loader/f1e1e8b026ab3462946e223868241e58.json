{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/onizuka/Bureau/Projects/StandOut/components/elements/basic/Collapse.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-env browser */\n\n/**\n * All debug logs are removed on build\n */\nimport React, { useState, useEffect, useRef, useCallback, useReducer } from 'react'; // using let instead of const,\n// experimenting with ES2015 bundle which gets a bit smaller when using let over const.\n\nlet COLLAPSED = 'collapsed';\nlet COLLAPSING = 'collapsing';\nlet EXPANDING = 'expanding';\nlet EXPANDED = 'expanded';\nlet defaultClassName = 'collapse-css-transition';\nlet defaultElementType = 'div';\nlet defaultCollapseHeight = '0px';\n/**\n *\n * @param {function} callback\n */\n\nfunction nextFrame(callback) {\n  requestAnimationFrame(function () {\n    //setTimeout(callback, 0); // NOT used because can be jumpy if click-spamming.\n    requestAnimationFrame(callback); // This is used.\n  });\n}\n\nfunction SPCollapse(_ref) {\n  let {\n    children,\n    transition,\n    style,\n    render,\n    elementType = defaultElementType,\n    isOpen,\n    collapseHeight = defaultCollapseHeight,\n    onInit,\n    onChange,\n    className = defaultClassName,\n    addState,\n    noAnim,\n    overflowOnExpanded\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"transition\", \"style\", \"render\", \"elementType\", \"isOpen\", \"collapseHeight\", \"onInit\", \"onChange\", \"className\", \"addState\", \"noAnim\", \"overflowOnExpanded\"]);\n\n  let getCollapsedVisibility = () => collapseHeight === '0px' ? 'hidden' : '';\n\n  let {\n    0: __,\n    1: forceUpdate\n  } = useReducer(_ => _ + 1, 0);\n  let elementRef = useRef();\n  let {\n    0: callbackTick,\n    1: setCallbackTick\n  } = useState(0); // Avoiding setState to control when stuff are updated.\n  // Might not be needed.\n\n  let state = useRef({\n    collapse: isOpen ? EXPANDED : COLLAPSED,\n    style: {\n      height: isOpen ? '' : collapseHeight,\n      visibility: isOpen ? '' : getCollapsedVisibility()\n    }\n  }).current;\n  useEffect(() => {\n    // Invoke callback when data are updated, use Effect to sync state.\n    callbackTick && onCallback(onChange);\n  }, [callbackTick]);\n  /**\n   *\n   * @param {function} callback\n   */\n\n  let onCallback = (callback, params = {}) => {\n    if (callback) {\n      callback(_objectSpread({\n        state: state.collapse,\n        style: state.style\n      }, params));\n    }\n  };\n\n  function setCollapsed() {\n    if (!elementRef.current) return; // might be redundant\n    // Update state\n\n    state.collapse = COLLAPSED;\n    state.style = {\n      height: collapseHeight,\n      visibility: getCollapsedVisibility()\n    };\n    forceUpdate();\n    setTimeout(() => setCallbackTick(Date.now), 0); // callback and re-render\n  }\n\n  function setCollapsing() {\n    if (!elementRef.current) return; // might be redundant\n\n    if (noAnim) {\n      return setCollapsed();\n    } // Update state\n\n\n    state.collapse = COLLAPSING;\n    state.style = {\n      height: getElementHeight(),\n      visibility: ''\n    };\n    forceUpdate();\n    nextFrame(() => {\n      if (!elementRef.current) return;\n      if (state.collapse !== COLLAPSING) return;\n      state.style = {\n        height: collapseHeight,\n        visibility: ''\n      }; //forceUpdate();\n\n      setCallbackTick(Date.now); // callback and re-render\n    });\n  }\n\n  function setExpanding() {\n    if (!elementRef.current) return; // might be redundant\n\n    if (noAnim) {\n      return setExpanded();\n    } // Updatetate\n\n\n    state.collapse = EXPANDING;\n    nextFrame(() => {\n      if (!elementRef.current) return; // might be redundant\n\n      if (state.collapse !== EXPANDING) return;\n      state.style = {\n        height: getElementHeight(),\n        visibility: ''\n      }; // forceUpdate();\n\n      setCallbackTick(Date.now); // callback and re-render\n    });\n  }\n\n  function setExpanded() {\n    if (!elementRef.current) return; // might be redundant\n    // Update state\n\n    state.collapse = EXPANDED;\n    state.style = {\n      height: '',\n      visibility: ''\n    };\n    forceUpdate();\n    setTimeout(() => setCallbackTick(Date.now), 0); // callback and re-render\n  }\n\n  function getElementHeight() {\n    // @ts-ignore\n    return `${elementRef.current.scrollHeight}px`;\n  }\n\n  function onTransitionEnd({\n    target,\n    propertyName\n  }) {\n    if (target === elementRef.current && propertyName === 'height') {\n      let styleHeight = target.style.height;\n\n      switch (state.collapse) {\n        case EXPANDING:\n          if (styleHeight === '' || styleHeight === collapseHeight) // This is stale, a newer event has happened before this could execute\n            console.warn(`onTransitionEnd height unexpected ${styleHeight}`, 'ignore setExpanded');else setExpanded();\n          break;\n\n        case COLLAPSING:\n          if (styleHeight === '' || styleHeight !== collapseHeight) // This is stale, a newer event has happened before this could execute\n            console.warn(`onTransitionEnd height unexpected ${styleHeight}`, 'ignore setCollapsed');else setCollapsed();\n          break;\n\n        default:\n          console.warn('Ignored in onTransitionEnd', state.collapse);\n      }\n    }\n  } // getDerivedStateFromProps\n\n\n  let didOpen = state.collapse === EXPANDED || state.collapse === EXPANDING;\n  if (!didOpen && isOpen) setExpanding();\n  if (didOpen && !isOpen) setCollapsing(); // END getDerivedStateFromProps\n\n  let overflow = state.collapse === EXPANDED && overflowOnExpanded ? '' : 'hidden';\n\n  let computedStyle = _objectSpread(_objectSpread({\n    overflow,\n    transition\n  }, style), state.style);\n\n  let ElementType = elementType;\n  let callbackRef = useCallback(node => {\n    if (node) {\n      elementRef.current = node;\n      onCallback(onInit, {\n        node\n      });\n    }\n  }, [elementType]);\n  let collapseClassName = addState ? `${className} --c-${state.collapse}` : className;\n  return /*#__PURE__*/_jsxDEV(ElementType, _objectSpread(_objectSpread({\n    ref: callbackRef,\n    style: computedStyle,\n    onTransitionEnd: onTransitionEnd,\n    className: collapseClassName\n  }, rest), {}, {\n    children: typeof children === 'function' ? children(state.collapse) : typeof render === 'function' ? render(state.collapse) : children\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 9\n  }, this);\n}\n\nexport default SPCollapse;","map":{"version":3,"sources":["/home/onizuka/Bureau/Projects/StandOut/components/elements/basic/Collapse.jsx"],"names":["React","useState","useEffect","useRef","useCallback","useReducer","COLLAPSED","COLLAPSING","EXPANDING","EXPANDED","defaultClassName","defaultElementType","defaultCollapseHeight","nextFrame","callback","requestAnimationFrame","SPCollapse","children","transition","style","render","elementType","isOpen","collapseHeight","onInit","onChange","className","addState","noAnim","overflowOnExpanded","rest","getCollapsedVisibility","__","forceUpdate","_","elementRef","callbackTick","setCallbackTick","state","collapse","height","visibility","current","onCallback","params","setCollapsed","setTimeout","Date","now","setCollapsing","getElementHeight","setExpanding","setExpanded","scrollHeight","onTransitionEnd","target","propertyName","styleHeight","console","warn","didOpen","overflow","computedStyle","ElementType","callbackRef","node","collapseClassName"],"mappings":"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","sourcesContent":["/* eslint-env browser */\n\n/**\n * All debug logs are removed on build\n */\n\nimport React, { useState, useEffect, useRef, useCallback, useReducer } from 'react';\n\n// using let instead of const,\n// experimenting with ES2015 bundle which gets a bit smaller when using let over const.\nlet COLLAPSED = 'collapsed';\nlet COLLAPSING = 'collapsing';\nlet EXPANDING = 'expanding';\nlet EXPANDED = 'expanded';\n\nlet defaultClassName = 'collapse-css-transition';\nlet defaultElementType = 'div';\nlet defaultCollapseHeight = '0px';\n\n/**\n *\n * @param {function} callback\n */\nfunction nextFrame(callback) {\n    requestAnimationFrame(function () {\n        //setTimeout(callback, 0); // NOT used because can be jumpy if click-spamming.\n        requestAnimationFrame(callback); // This is used.\n    });\n}\n\nfunction SPCollapse({\n    children,\n    transition,\n    style,\n    render,\n    elementType = defaultElementType,\n    isOpen,\n    collapseHeight = defaultCollapseHeight,\n    onInit,\n    onChange,\n    className = defaultClassName,\n    addState,\n    noAnim,\n    overflowOnExpanded,\n    ...rest\n}) {\n    let getCollapsedVisibility = () => (collapseHeight === '0px' ? 'hidden' : '');\n\n    let [__, forceUpdate] = useReducer((_) => _ + 1, 0);\n\n    let elementRef = useRef();\n    let [callbackTick, setCallbackTick] = useState(0);\n\n    // Avoiding setState to control when stuff are updated.\n    // Might not be needed.\n    let state = useRef({\n        collapse: isOpen ? EXPANDED : COLLAPSED,\n        style: {\n            height: isOpen ? '' : collapseHeight,\n            visibility: isOpen ? '' : getCollapsedVisibility(),\n        },\n    }).current;\n\n    useEffect(() => {\n        // Invoke callback when data are updated, use Effect to sync state.\n        callbackTick && onCallback(onChange);\n    }, [callbackTick]);\n\n    /**\n     *\n     * @param {function} callback\n     */\n    let onCallback = (callback, params = {}) => {\n        if (callback) {\n            callback({ state: state.collapse, style: state.style, ...params });\n        }\n    };\n\n    function setCollapsed() {\n        if (!elementRef.current) return; // might be redundant\n\n        // Update state\n        state.collapse = COLLAPSED;\n\n        state.style = {\n            height: collapseHeight,\n            visibility: getCollapsedVisibility(),\n        };\n        forceUpdate();\n\n        setTimeout(() => setCallbackTick(Date.now), 0); // callback and re-render\n    }\n\n    function setCollapsing() {\n        if (!elementRef.current) return; // might be redundant\n\n        if (noAnim) {\n            return setCollapsed();\n        }\n\n        // Update state\n        state.collapse = COLLAPSING;\n\n        state.style = {\n            height: getElementHeight(),\n            visibility: '',\n        };\n        forceUpdate();\n\n        nextFrame(() => {\n            if (!elementRef.current) return;\n            if (state.collapse !== COLLAPSING) return;\n\n            state.style = {\n                height: collapseHeight,\n                visibility: '',\n            };\n            //forceUpdate();\n\n            setCallbackTick(Date.now); // callback and re-render\n        });\n    }\n\n    function setExpanding() {\n        if (!elementRef.current) return; // might be redundant\n\n        if (noAnim) {\n            return setExpanded();\n        }\n\n        // Updatetate\n        state.collapse = EXPANDING;\n\n        nextFrame(() => {\n            if (!elementRef.current) return; // might be redundant\n            if (state.collapse !== EXPANDING) return;\n\n            state.style = {\n                height: getElementHeight(),\n                visibility: '',\n            };\n            // forceUpdate();\n\n            setCallbackTick(Date.now); // callback and re-render\n        });\n    }\n\n    function setExpanded() {\n        if (!elementRef.current) return; // might be redundant\n\n        // Update state\n        state.collapse = EXPANDED;\n\n        state.style = {\n            height: '',\n            visibility: '',\n        };\n        forceUpdate();\n\n        setTimeout(() => setCallbackTick(Date.now), 0); // callback and re-render\n    }\n\n    function getElementHeight() {\n        // @ts-ignore\n        return `${elementRef.current.scrollHeight}px`;\n    }\n\n    function onTransitionEnd({ target, propertyName }) {\n        if (target === elementRef.current && propertyName === 'height') {\n            let styleHeight = target.style.height;\n\n            switch (state.collapse) {\n                case EXPANDING:\n                    if (styleHeight === '' || styleHeight === collapseHeight)\n                        // This is stale, a newer event has happened before this could execute\n                        console.warn(`onTransitionEnd height unexpected ${styleHeight}`, 'ignore setExpanded');\n                    else setExpanded();\n                    break;\n                case COLLAPSING:\n                    if (styleHeight === '' || styleHeight !== collapseHeight)\n                        // This is stale, a newer event has happened before this could execute\n                        console.warn(`onTransitionEnd height unexpected ${styleHeight}`, 'ignore setCollapsed');\n                    else setCollapsed();\n                    break;\n                default:\n                    console.warn('Ignored in onTransitionEnd', state.collapse);\n            }\n        }\n    }\n\n    // getDerivedStateFromProps\n    let didOpen = state.collapse === EXPANDED || state.collapse === EXPANDING;\n\n    if (!didOpen && isOpen) setExpanding();\n\n    if (didOpen && !isOpen) setCollapsing();\n    // END getDerivedStateFromProps\n\n    let overflow = state.collapse === EXPANDED && overflowOnExpanded ? '' : 'hidden';\n\n    let computedStyle = {\n        overflow,\n        transition,\n        ...style,\n        ...state.style,\n    };\n    let ElementType = elementType;\n\n    let callbackRef = useCallback(\n        (node) => {\n            if (node) {\n                elementRef.current = node;\n                onCallback(onInit, { node });\n            }\n        },\n        [elementType]\n    );\n\n    let collapseClassName = addState ? `${className} --c-${state.collapse}` : className;\n\n    return (\n        <ElementType\n            ref={callbackRef}\n            style={computedStyle}\n            onTransitionEnd={onTransitionEnd}\n            className={collapseClassName}\n            {...rest}\n        >\n            {typeof children === 'function'\n                ? children(state.collapse)\n                : typeof render === 'function'\n                ? render(state.collapse)\n                : children}\n        </ElementType>\n    );\n}\n\nexport default SPCollapse;\n"]},"metadata":{},"sourceType":"module"}